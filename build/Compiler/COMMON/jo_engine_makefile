#
# Jo Engine Makefile
#

# Modified on 8/13/21 by Amber Dean to account for changed folder structure
# as well as some other Makefile customizations and simplifications.

### As of now, these settings have to be enabled regardless ###
JO_COMPILE_USING_SGL = 1; CCFLAGS += -DJO_COMPILE_USING_SGL

JO_COMPILE_WITH_FS_MODULE = 1
ifeq (1,${JO_COMPILE_WITH_FS_MODULE})
	CCFLAGS += -DJO_COMPILE_WITH_FS_SUPPORT
	SRCS += $(JO_ENGINE_SRC_DIR)/fs.c
endif
### ------------------------------------------------------ ###
ifeq (${JO_FRAMERATE},)
	CCFLAGS += -DJO_FRAMERATE=1
else
	CCFLAGS += -DJO_FRAMERATE=${JO_FRAMERATE}
endif
ifeq (1,${JO_PSEUDO_SATURN_KAI_SUPPORT})
	JO_COMPILE_WITH_RAM_CARD_MODULE = 0
endif
ifeq (1,${JO_COMPILE_WITH_FAST_BUT_LESS_ACCURATE_MATH})
	CCFLAGS += -DJO_COMPILE_WITH_FAST_BUT_LESS_ACCURATE_MATH
endif
ifeq (1,${JO_COMPILE_WITH_CONSOLE_SUPPORT})
	# Console support depends on keyboard support
	JO_COMPILE_WITH_KEYBOARD_SUPPORT = 1
endif
ifeq (1,${JO_COMPILE_WITH_KEYBOARD_SUPPORT})
	CCFLAGS += -DJO_COMPILE_WITH_KEYBOARD_SUPPORT
	SRCS += $(JO_ENGINE_SRC_DIR)/keyboard.c
endif
ifeq (1,${JO_COMPILE_WITH_CONSOLE_SUPPORT})
	CCFLAGS += -DJO_COMPILE_WITH_CONSOLE_SUPPORT
	SRCS += $(JO_ENGINE_SRC_DIR)/console.c
	SRCS += $(JO_ENGINE_SRC_DIR)/console_builtins.c
endif
ifeq (1,${JO_COMPILE_WITH_VIDEO_MODULE})
	ifeq (1,${JO_COMPILE_USING_SGL})
		LIBS += $(SGLLDR)/LIBCPK.A $(SGLLDR)/LIBSND.A
	endif

	CCFLAGS += -DJO_COMPILE_WITH_VIDEO_SUPPORT
	SRCS += $(JO_ENGINE_SRC_DIR)/video.c
endif
ifeq (1,${JO_COMPILE_WITH_BACKUP_MODULE})
	CCFLAGS += -DJO_COMPILE_WITH_BACKUP_SUPPORT
	SRCS += $(JO_ENGINE_SRC_DIR)/backup.c
endif
ifeq (1,${JO_COMPILE_WITH_TGA_MODULE})
	CCFLAGS += -DJO_COMPILE_WITH_TGA_SUPPORT
	SRCS += $(JO_ENGINE_SRC_DIR)/tga.c
endif
ifeq (1,${JO_COMPILE_WITH_SOFTWARE_RENDERER_MODULE})
	CCFLAGS += -DJO_COMPILE_WITH_SOFTWARE_RENDERER_SUPPORT
	SRCS += $(JO_ENGINE_SRC_DIR)/software_renderer.c
endif
ifeq (1,${JO_COMPILE_WITH_AUDIO_MODULE})
	CCFLAGS += -DJO_COMPILE_WITH_AUDIO_SUPPORT
	SRCS += $(JO_ENGINE_SRC_DIR)/audio.c
endif
ifeq (1,${JO_COMPILE_WITH_3D_MODULE})
	CCFLAGS += -DJO_COMPILE_WITH_3D_SUPPORT
	SRCS += $(JO_ENGINE_SRC_DIR)/3d.c
endif
ifeq (1,${JO_COMPILE_WITH_STORYBOARD_MODULE})
	CCFLAGS += -DJO_COMPILE_WITH_STORYBOARD_SUPPORT
	SRCS += $(JO_ENGINE_SRC_DIR)/storyboard.c
endif
ifeq (1,${JO_COMPILE_WITH_PSEUDO_MODE7_MODULE})
	CCFLAGS += -DJO_COMPILE_WITH_PSEUDO_MODE7_SUPPORT
	SRCS += $(JO_ENGINE_SRC_DIR)/mode7.c
endif
ifeq (1,${JO_COMPILE_WITH_EFFECTS_MODULE})
	CCFLAGS += -DJO_COMPILE_WITH_EFFECTS_SUPPORT
	SRCS += $(JO_ENGINE_SRC_DIR)/effects.c
endif
ifeq (${JO_GLOBAL_MEMORY_SIZE_FOR_MALLOC},)
	CCFLAGS += -DJO_GLOBAL_MEMORY_SIZE_FOR_MALLOC=393216
else
	CCFLAGS += -DJO_GLOBAL_MEMORY_SIZE_FOR_MALLOC=${JO_GLOBAL_MEMORY_SIZE_FOR_MALLOC}
endif
ifeq (${JO_MAX_SPRITE},)
	CCFLAGS += -DJO_MAX_SPRITE=255
else
	CCFLAGS += -DJO_MAX_SPRITE=${JO_MAX_SPRITE}
endif
ifeq (${JO_MAX_FILE_IN_IMAGE_PACK},)
	CCFLAGS += -DJO_MAX_FILE_IN_IMAGE_PACK=32
else
	CCFLAGS += -DJO_MAX_FILE_IN_IMAGE_PACK=${JO_MAX_FILE_IN_IMAGE_PACK}
endif
ifeq (${JO_MAP_MAX_LAYER},)
	CCFLAGS += -DJO_MAP_MAX_LAYER=8
else
	CCFLAGS += -DJO_MAP_MAX_LAYER=${JO_MAP_MAX_LAYER}
endif
ifeq (${JO_MAX_SPRITE_ANIM},)
	CCFLAGS += -DJO_MAX_SPRITE_ANIM=16
else
	CCFLAGS += -DJO_MAX_SPRITE_ANIM=${JO_MAX_SPRITE_ANIM}
endif
ifeq (${JO_MAX_FS_BACKGROUND_JOBS},)
	CCFLAGS += -DJO_MAX_FS_BACKGROUND_JOBS=1
else
	CCFLAGS += -DJO_MAX_FS_BACKGROUND_JOBS=${JO_MAX_FS_BACKGROUND_JOBS}
endif
ifeq (${JO_DEBUG},)
	CCFLAGS += -DJO_DEBUG
else
	ifeq (1,${JO_DEBUG})
		CCFLAGS += -DJO_DEBUG
	endif
endif
ifeq (${JO_COMPILE_WITH_PRINTF_MODULE},)
	CCFLAGS += -DJO_COMPILE_WITH_PRINTF_SUPPORT
else
	ifeq (1,${JO_COMPILE_WITH_PRINTF_MODULE})
		CCFLAGS += -DJO_COMPILE_WITH_PRINTF_SUPPORT
	endif
endif
ifeq (${JO_COMPILE_WITH_SPRITE_HASHTABLE},)
	CCFLAGS += -DJO_COMPILE_WITH_SPRITE_HASHTABLE
else
	ifeq (1,${JO_COMPILE_WITH_SPRITE_HASHTABLE})
		CCFLAGS += -DJO_COMPILE_WITH_SPRITE_HASHTABLE
	endif
endif
ifeq (${JO_480i},)
	CCFLAGS += -DJO_480i
endif
ifeq (${JO_NTSC},)
	CCFLAGS += -DJO_NTSC_VERSION
else
	ifeq (1,${JO_NTSC})
		CCFLAGS += -DJO_NTSC_VERSION
	else
		CCFLAGS += -DJO_PAL_VERSION
	endif
endif
ifeq (${JO_COMPILE_WITH_RAM_CARD_MODULE},)
	CCFLAGS += -DJO_COMPILE_WITH_RAM_CARD_SUPPORT
else
	ifeq (1,${JO_COMPILE_WITH_RAM_CARD_MODULE})
		CCFLAGS += -DJO_COMPILE_WITH_RAM_CARD_SUPPORT
	endif
endif
ifeq (${JO_COMPILE_WITH_DUAL_CPU_MODULE},)
	CCFLAGS += -DJO_COMPILE_WITH_DUAL_CPU_SUPPORT
	SRCS += $(JO_ENGINE_SRC_DIR)/slave.c
else
	ifeq (1,${JO_COMPILE_WITH_DUAL_CPU_MODULE})
		CCFLAGS += -DJO_COMPILE_WITH_DUAL_CPU_SUPPORT
		SRCS += $(JO_ENGINE_SRC_DIR)/slave.c
	endif
endif

### End of modules/options section

SRCS += $(JO_ENGINE_SRC_DIR)/font.c $(JO_ENGINE_SRC_DIR)/input.c $(JO_ENGINE_SRC_DIR)/physics.c $(JO_ENGINE_SRC_DIR)/core.c \
		$(JO_ENGINE_SRC_DIR)/math.c $(JO_ENGINE_SRC_DIR)/malloc.c $(JO_ENGINE_SRC_DIR)/tools.c $(JO_ENGINE_SRC_DIR)/palette.c \
		$(JO_ENGINE_SRC_DIR)/sprites.c $(JO_ENGINE_SRC_DIR)/map.c $(JO_ENGINE_SRC_DIR)/list.c $(JO_ENGINE_SRC_DIR)/sprite_animator.c \
		$(JO_ENGINE_SRC_DIR)/image.c $(JO_ENGINE_SRC_DIR)/vdp2.c $(JO_ENGINE_SRC_DIR)/time.c $(JO_ENGINE_SRC_DIR)/vdp1_command_pipeline.c \
		$(JO_ENGINE_SRC_DIR)/vdp2_malloc.c

# Always compile with SGL
SYSOBJS = $(SGLLDR)/SGLAREA.O
LIBS += $(SGLLDR)/SEGA_SYS.A $(SGLLDR)/LIBCD.A $(SGLLDR)/LIBSGL.A

OBJS = $(SRCS:.c=.o)

# This Makefile supports builds on Linux only
CC = $(COMPILER_DIR)/LINUX/bin/sh-none-elf-gcc-8.2.0
CONV = $(COMPILER_DIR)/LINUX/bin/sh-none-elf-objcopy
CUE_MAKER = "$(COMPILER_DIR)/LINUX/Other Utilities/CueMaker"
# TODO :: Copied this over from deleted WINDOWS directory... will see if it works as-is here
CCFLAGS += "-I$(COMPILER_DIR)/LINUX/sh-none-elf/include"

# Changed to correctly reflect new relative path inside ./src folder
ASSETS_DIR = $(SRC_DIR)/cd

MKISOFS = mkisofs
RM = rm -rf

# Always compile with SGL
SGLDIR = $(COMPILER_DIR)/COMMON/SGL_302j
SGLIDR = $(SGLDIR)/INC
SGLLDR = $(SGLDIR)/LIB_ELF

CMNDIR = $(COMPILER_DIR)/COMMON

CCFLAGS += -fkeep-inline-functions -W -Wall -Wshadow -Wbad-function-cast -Winline -Wcomment \
-Winline -Wsign-compare -Wextra -Wno-strict-aliasing \
-fno-common -ffast-math \
--param max-inline-insns-single=50 -fms-extensions -std=gnu99 \
-fmerge-all-constants -fno-ident -fno-unwind-tables -fno-asynchronous-unwind-tables \
-fomit-frame-pointer -fstrength-reduce -frerun-loop-opt -O2 -nodefaultlibs -nostdlib -fno-builtin \
-m2 -c -I$(JO_ENGINE_SRC_DIR)

# ifneq ($(OS), Windows_NT)
CCFLAGS += -flto
# endif

# Always compile with SGL
CCFLAGS += -I$(SGLIDR)
LDFLAGS = -m2
LDFLAGS += -L$(SGLLDR)

LDFLAGS +=-Xlinker -T$(LDFILE) -Xlinker -Map \
          -Xlinker $(MPFILE) -Xlinker -e -Xlinker ___Start -nostartfiles
#ifneq ($(OS), Windows_NT)
LIBS += -L.$(COMPILER_DIR)/LINUX/sh-elf/sh-elf/lib/ -Wl,--relax -lgcc
#endif
DFLAGS =

# TODO :: Should/can these be named something more descriptive than "TARGETn"?
TARGET   = $(GAME_DISCIMG_NAME).elf
TARGET1  = $(TARGET:.elf=.bin)
TARGET2  = $(TARGET:.elf=.iso)
TARGET3  = $(TARGET:.elf=.cue)
MPFILE   = $(TARGET:.elf=.map)
IPFILE   = $(CMNDIR)/IP.BIN
LDFILE   = $(CMNDIR)/sgl.linker # Always compile with SGL

# TODO :: Check if we can/should replace "SaturnApp" with the name of this game project
MKISOFS_FLAGS = -quiet -sysid "SEGA SATURN" -volid "SaturnApp" -volset "SaturnApp" -sectype 2352 \
	-publisher "SEGA ENTERPRISES, LTD." -preparer "SEGA ENTERPRISES, LTD." -appid "SaturnApp" \
	-abstract "$(ASSETS_DIR)/ABS.TXT" -copyright "$(ASSETS_DIR)/CPY.TXT" -biblio "$(ASSETS_DIR)/BIB.TXT" -generic-boot $(IPFILE) \
	-full-iso9660-filenames -o $(TARGET2) $(ASSETS_DIR) $(ENTRYPOINT)

MAKEFILE = Makefile # edited to reflect capitalized filename

.PHONY : all clean re

all: $(TARGET) $(TARGET1) $(TARGET2) $(TARGET3)

# C source (of both JoEngine and project) compilation stage into .elf binary
$(TARGET) : $(SYSOBJS) $(OBJS) $(MAKEFILE) $(LDFILE)
	$(CC) $(LDFLAGS) $(SYSOBJS) $(OBJS) $(LIBS) -o $@

# Convert .elf binary from the first stage to a COFF .bin executable
$(TARGET1) : $(TARGET) $(SYSOBJS) $(OBJS) $(MAKEFILE) $(LDFILE)
	$(CONV) -O binary $(TARGET) $(TARGET1)

# Create .iso disc image that includes the CD-ROM static assets
$(TARGET2): $(TARGET1)
	$(CONV) -O binary $(TARGET) $(ASSETS_DIR)/cd/0.bin
	$(MKISOFS) $(MKISOFS_FLAGS)

# Generate bin/cue disk image files
$(TARGET3): $(TARGET1) $(TARGET2)
	$(CUE_MAKER)

.c.o:
	$(CC) $< $(DFLAGS) $(CCFLAGS) $(_CCFLAGS) -o $@

clean:
	$(RM) $(OBJS) $(TARGET) $(TARGET1) $(TARGET2) $(MPFILE) $(ASSETS_DIR)/cd/0.bin

re: clean all
